<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.chher.crm.workbench.dao.TranDao">

    <select id="getCharts" resultType="map">

        select

            count(*) as value,stage as name

        from tbl_tran

        group by stage

    </select>

    <select id="getTotal" resultType="int">

        select count(*) from tbl_tran

    </select>

    <update id="changeStage">

        update tbl_tran set stage=#{stage},editBy=#{editBy},editTime=#{editTime}
        where id=#{id}

    </update>

    <select id="detail" resultType="Tran">

        select

            tran.id,
            user.name as owner,
            tran.money,
            tran.name,
            tran.expectedDate,
            cus.name as customerId,
            tran.stage,
            tran.type,
            tran.source,
            act.name as activityId,
            con.fullname as contactsId,
            tran.createBy,
            tran.createTime,
            tran.editBy,
            tran.editTime,
            tran.description,
            tran.contactSummary,
            tran.nextContactTime


        from tbl_tran tran
                 join tbl_user user
        on tran.owner=user.id
            join tbl_customer cus
            on tran.customerId=cus.id
            left join tbl_activity act
            on tran.activityId=act.id
            left join tbl_contacts con
            on tran.contactsId=con.id

        where tran.id=#{id}

    </select>

    <select id="detailById" resultType="tran">
        select t.id,
            u.name as owner,
            t.money,
            t.name,
            t.expectedDate,
            c.name as customerId,
            t.stage,
            t.type,
            t.source,
            a.name as activityId,
            con.fullname as contactsId,
            t.createBy,
            t.createTime,
            t.editBy,
            t.editTime,
            t.description,
            t.contactSummary,
            t.nextContactTime
        from tbl_tran t
        join tbl_user u
        on t.owner=u.id
        left join tbl_activity a
        on t.activityId=a.id
        left join tbl_customer c
        on t.customerId=c.id
        join tbl_contacts con
        on t.contactsId=con.id
        where t.id = #{id}
    </select>

    <select id="getTotalByCondition" resultType="int">
        select count(*)
        from tbl_tran t
        left join tbl_user u
        on t.owner=u.id
        left join tbl_customer c
        on t.customerId=c.id
        left join tbl_contacts con
        on t.contactsId=con.id
        <where>

            <if test="name !=null and name !=''">
                t.name like concat('%',#{name},'%')
            </if>

            <if test="owner !=null and owner !=''">
                and u.name like concat('%',#{owner},'%')
            </if>

            <if test="source !=null and source !=''">
                and t.source = #{source}
            </if>

            <if test="stage !=null and stage !=''">
                and t.stage = #{stage}
            </if>

            <if test="type !=null and type !=''">
                and t.type = #{type}
            </if>

            <if test="contactsId !=null and contactsId !=''">
                and con.fullname = #{contactsId}
            </if>

            <if test="customerId !=null and customerId !=''">
                and c.name = #{customerId}
            </if>
        </where>
    </select>

    <select id="pageList" resultType="Tran">
    select
        t.id,
        u.name as owner,
        t.money,
        t.name,
        c.name as customerId,
        t.stage,
        t.type,
        t.source,
        con.fullname as contactsId
    from tbl_tran t
    left join tbl_user u
    on t.owner=u.id
    left join tbl_customer c
    on t.customerId=c.id
    left join tbl_contacts con
    on t.contactsId=con.id
    <where>

        <if test="name !=null and name !=''">
            t.name like concat('%',#{name},'%')
        </if>

        <if test="owner !=null and owner !=''">
            and u.name like concat('%',#{owner},'%')
        </if>

        <if test="source !=null and source !=''">
            and t.source = #{source}
        </if>

        <if test="stage !=null and stage !=''">
            and t.stage = #{stage}
        </if>

        <if test="type !=null and type !=''">
            and t.type = #{type}
        </if>

        <if test="contactsId !=null and contactsId !=''">
            and con.fullname = #{contactsId}
        </if>

        <if test="customerId !=null and customerId !=''">
            and c.name = #{customerId}
        </if>
    </where>
    order by t.createTime desc
    limit #{skipCount},#{pageSize}
    </select>
	
    <insert id="save">
        insert into tbl_tran(id,
                             owner,
                             money,
                             name,
                             expectedDate,
                             customerId,
                             stage,
                             type,
                             source,
                             activityId,
                             contactsId,
                             createBy,
                             createTime,
                             description,
                             contactSummary,
                             nextContactTime)
        values(#{id},
               #{owner},
               #{money},
               #{name},
               #{expectedDate},
               #{customerId},
               #{stage},
               #{type},
               #{source},
               #{activityId},
               #{contactsId},
               #{createBy},
               #{createTime},
               #{description},
               #{contactSummary},
               #{nextContactTime})
    </insert>
</mapper>

































